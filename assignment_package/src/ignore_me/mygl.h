#ifndef MYGL_H
#define MYGL_H

#include "glwidget277.h"
#include <implement_me/utils.h>
#include "shaderprogram.h"
#include "camera.h"
#include <implement_me/utils.h>
#include "pointvisualizer.h"
#include <implement_me/kdtree.h>
#include "kdvisualizer.h"
#include "searchsphere.h"
#include "searchvisualizer.h"
#include <QOpenGLVertexArrayObject>
#include <QOpenGLShaderProgram>
#include <QSound>
#include "errorwindow.h"


class MyGL
    : public GLWidget277
{
    Q_OBJECT
private:
    Camera camera;
    ShaderProgram prog_flat;// A shader program that uses "flat" reflection (no shadowing at all)

    GLuint vao; // A handle for our vertex array object. This will store the VBOs created in our geometry classes.

    KDVisualizer kdVisualizer; // Draws the outlines of the k-d tree nodes

    Sampler sampler; // Generates and returns a collection of 3D points based on warping samples on a [0, 1) square.
    PointVisualizer pointVisualizer; // A Drawable that generates a VBO to draw the points generated by sampler.

    int numSamples;
    SampleMode sampleMode;

    KDTree kdTree;
    SearchSphere searchSphere;
    SearchVisualizer searchVis;

    int mX, mY;

public:
    explicit MyGL(QWidget *parent = 0);
    ~MyGL();

    void initializeGL();
    void resizeGL(int w, int h);
    void paintGL();

    bool displayGrid;
    void refreshVisuals();


    ErrorWindow errorWindow;

protected:
    void keyPressEvent(QKeyEvent *e);
    void mousePressEvent(QMouseEvent *e);
    void mouseMoveEvent(QMouseEvent *e);

public slots:
    void slot_setSamples(int);
    void slot_setSampleMode(SampleMode);
    void slot_buildKDTree();
    void slot_updateSphereX(double);
    void slot_updateSphereY(double);
    void slot_updateSphereZ(double);
    void slot_updateSphereR(double);
    void slot_setDisplayGrid();
    void slot_searchPoints();

signals:
    void sig_updateNumSamples(int);
    void sig_fixSampleModeBox(int);
};


#endif // MYGL_H
